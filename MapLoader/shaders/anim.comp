#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "wavefront.glsl"

layout(binding = 0, scalar) buffer Vertices_
{
  VertexPosBinding v[];
}
vertices;

layout(buffer_reference, scalar) buffer VertexPos {VertexPosBinding v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer VertexBinormal {VertexBinormalBinding v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer VertexMorph {VertexMorphBinding v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer VertexBlend {VertexBlendBinding v[]; }; // Positions of an object

layout(set = 1, binding = eObjDescs, scalar) buffer ObjDesc_ { MeshDesc i[]; } objDesc;
layout(set = 1, binding = eInstDescs, scalar) buffer InstanceDescription_ { InstDesc i[]; } instDesc;

layout(push_constant) uniform shaderInformation
{
  float iTime;
}
pushc;

void main()
{
  VertexPosBinding v0 = vertices.v[gl_GlobalInvocationID.x];

  // Compute vertex position
  //const float PI       = 3.14159265;
  //const float signY    = (v0.pos.y >= 0 ? 1 : -1);
  //const float radius   = length(v0.pos.xz);
  //const float argument = pushc.iTime * 4 + radius * PI;
  //const float s        = sin(argument);
  //v0.pos.y             = signY * abs(s) * 0.5;
//
  //// Compute normal
  //if(radius == 0.0f)
  //{
  //  v0.nrm = vec3(0.0f, signY, 0.0f);
  //}
  //else
  //{
  //  const float c        = cos(argument);
  //  const float xzFactor = -PI * s * c;
  //  const float yFactor  = 2.0f * signY * radius * abs(s);
  //  v0.nrm               = normalize(vec3(v0.pos.x * xzFactor, yFactor, v0.pos.z * xzFactor));
  //}

  vertices.v[gl_GlobalInvocationID.x] = v0;
}