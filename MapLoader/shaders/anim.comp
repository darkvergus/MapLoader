#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "wavefront.glsl"

layout(binding = 0, scalar) buffer Tasks_
{
	AnimationTask v[];
}
tasks;

layout(buffer_reference, scalar) buffer VertexPos {VertexPosBinding v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer VertexBinormal {VertexBinormalBinding v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer VertexMorph {VertexMorphBinding v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer VertexBlend {VertexBlendBinding v[]; }; // Positions of an object

layout(set = 1, binding = eObjDescs, scalar) buffer ObjDesc_ { MeshDesc i[]; } objDesc;
layout(set = 1, binding = eInstDescs, scalar) buffer InstanceDescription_ { InstDesc i[]; } instDesc;

layout(push_constant) uniform shaderInformation
{
	float iTime;
}
pushc;

void main()
{
	AnimationTask task = tasks.v[gl_GlobalInvocationID.x];

	if (gl_GlobalInvocationID.y >= task.vertices) return;

	VertexPos vertices = VertexPos(task.vertexPosAddress);


	VertexPos outVertices = VertexPos(task.vertexPosAddressOverride);

	outVertices.v[gl_GlobalInvocationID.y] = vertices.v[gl_GlobalInvocationID.y];

	if (task.vertexBinormalAddressOverride == 0) return;

	VertexBinormal vertexBinormals = VertexBinormal(task.vertexBinormalAddress);


	VertexBinormal outVertexBinormals = VertexBinormal(task.vertexBinormalAddressOverride);

	outVertexBinormals.v[gl_GlobalInvocationID.y] = vertexBinormals.v[gl_GlobalInvocationID.y];
}